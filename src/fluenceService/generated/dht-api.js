"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.1-228
 *
 */
var fluence_1 = require("@fluencelabs/fluence");
var v1_1 = require("@fluencelabs/fluence/dist/internal/compilerSupport/v1");
function initTopicAndSubscribe() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var topic;
    var value;
    var relay_id;
    var service_id;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        topic = args[1];
        value = args[2];
        relay_id = args[3];
        service_id = args[4];
        config = args[5];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        topic = args[0];
        value = args[1];
        relay_id = args[2];
        service_id = args[3];
        config = args[4];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n      (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n     )\n     (call %init_peer_id% (\"getDataSrv\" \"value\") [] value)\n    )\n    (call %init_peer_id% (\"getDataSrv\" \"relay_id\") [] relay_id)\n   )\n   (call %init_peer_id% (\"getDataSrv\" \"service_id\") [] service_id)\n  )\n  (xor\n   (seq\n    (seq\n     (call -relay- (\"op\" \"string_to_b58\") [topic] k)\n     (call -relay- (\"kad\" \"neighborhood\") [k [] []] nodes)\n    )\n    (fold nodes n\n     (par\n      (xor\n       (seq\n        (seq\n         (call n (\"peer\" \"timestamp_sec\") [] t)\n         (call n (\"aqua-dht\" \"register_key\") [topic t false 0])\n        )\n        (call n (\"aqua-dht\" \"put_value\") [topic value t relay_id service_id 0])\n       )\n       (null)\n      )\n      (next n)\n     )\n    )\n   )\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.on('getDataSrv', 'value', function () { return value; });
            h.on('getDataSrv', 'relay_id', function () { return relay_id === null ? [] : [relay_id]; });
            h.on('getDataSrv', 'service_id', function () { return service_id === null ? [] : [service_id]; });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for initTopicAndSubscribe');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.initTopicAndSubscribe = initTopicAndSubscribe;
function initTopicAndSubscribeBlocking() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var topic;
    var value;
    var relay_id;
    var service_id;
    var progress;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        topic = args[1];
        value = args[2];
        relay_id = args[3];
        service_id = args[4];
        progress = args[5];
        config = args[6];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        topic = args[0];
        value = args[1];
        relay_id = args[2];
        service_id = args[3];
        progress = args[4];
        config = args[5];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n       (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n      )\n      (call %init_peer_id% (\"getDataSrv\" \"value\") [] value)\n     )\n     (call %init_peer_id% (\"getDataSrv\" \"relay_id\") [] relay_id)\n    )\n    (call %init_peer_id% (\"getDataSrv\" \"service_id\") [] service_id)\n   )\n   (xor\n    (seq\n     (seq\n      (call -relay- (\"op\" \"string_to_b58\") [topic] k)\n      (call -relay- (\"kad\" \"neighborhood\") [k [] []] nodes)\n     )\n     (fold nodes n\n      (par\n       (seq\n        (xor\n         (seq\n          (seq\n           (seq\n            (call n (\"peer\" \"timestamp_sec\") [] t)\n            (call n (\"aqua-dht\" \"register_key\") [topic t false 0])\n           )\n           (call n (\"aqua-dht\" \"put_value\") [topic value t relay_id service_id 0] result)\n          )\n          (xor\n           (match result.$.success! true\n            (xor\n             (seq\n              (seq\n               (ap result $results)\n               (call -relay- (\"op\" \"noop\") [])\n              )\n              (xor\n               (call %init_peer_id% (\"callbackSrv\" \"progress\") [n])\n               (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n              )\n             )\n             (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n            )\n           )\n           (null)\n          )\n         )\n         (null)\n        )\n        (call %init_peer_id% (\"op\" \"noop\") [])\n       )\n       (next n)\n      )\n     )\n    )\n    (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n   )\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [$results.$.[0]!])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 5])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.on('getDataSrv', 'value', function () { return value; });
            h.on('getDataSrv', 'relay_id', function () { return relay_id === null ? [] : [relay_id]; });
            h.on('getDataSrv', 'service_id', function () { return service_id === null ? [] : [service_id]; });
            h.use(function (req, resp, next) {
                if (req.serviceId === 'callbackSrv' && req.fnName === 'progress') {
                    var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                            arg0: req.tetraplets[0]
                        } });
                    resp.retCode = v1_1.ResultCodes.success;
                    progress(req.args[0], callParams);
                    resp.result = {};
                }
                next();
            });
            h.onEvent('callbackSrv', 'response', function (args) {
                var res = args[0];
                resolve(res);
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for initTopicAndSubscribeBlocking');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
exports.initTopicAndSubscribeBlocking = initTopicAndSubscribeBlocking;
function findSubscribers() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var topic;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        topic = args[1];
        config = args[2];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        topic = args[0];
        config = args[1];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n    (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n   )\n   (xor\n    (seq\n     (seq\n      (seq\n       (call -relay- (\"op\" \"string_to_b58\") [topic] k)\n       (call -relay- (\"kad\" \"neighborhood\") [k [] []] nodes)\n      )\n      (fold nodes n\n       (par\n        (seq\n         (xor\n          (seq\n           (call n (\"peer\" \"timestamp_sec\") [] t)\n           (call n (\"aqua-dht\" \"get_values\") [topic t] $res)\n          )\n          (null)\n         )\n         (call -relay- (\"op\" \"noop\") [])\n        )\n        (next n)\n       )\n      )\n     )\n     (call -relay- (\"aqua-dht\" \"merge_two\") [$res.$.[0].result! $res.$.[1].result!] v)\n    )\n    (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n   )\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [v.$.result!])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.onEvent('callbackSrv', 'response', function (args) {
                var res = args[0];
                resolve(res);
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for findSubscribers');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
exports.findSubscribers = findSubscribers;

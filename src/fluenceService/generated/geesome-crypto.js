"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.1-228
 *
 */
var fluence_1 = require("@fluencelabs/fluence");
var v1_1 = require("@fluencelabs/fluence/dist/internal/compilerSupport/v1");
function registerGeesomeCrypto() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var serviceId;
    var service;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
    }
    if (typeof args[0] === 'string') {
        serviceId = args[0];
    }
    else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }
    else {
        serviceId = "GeesomeCrypto";
    }
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(fluence_1.FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    }
    else if (typeof args[1] === 'object') {
        service = args[1];
    }
    else {
        service = args[2];
    }
    peer.internals.callServiceHandler.use(function (req, resp, next) {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }
        if (req.fnName === 'checkSignature') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    from: req.tetraplets[0], data: req.tetraplets[1], seqno: req.tetraplets[2], signature: req.tetraplets[3]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.checkSignature(req.args[0], req.args[1], req.args[2], req.args[3], callParams);
        }
        next();
    });
}
exports.registerGeesomeCrypto = registerGeesomeCrypto;
function registerClientAPI() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var serviceId;
    var service;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
    }
    if (typeof args[0] === 'string') {
        serviceId = args[0];
    }
    else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }
    else {
        serviceId = "api";
    }
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(fluence_1.FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    }
    else if (typeof args[1] === 'object') {
        service = args[1];
    }
    else {
        service = args[2];
    }
    peer.internals.callServiceHandler.use(function (req, resp, next) {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }
        if (req.fnName === 'receive_event') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    topic: req.tetraplets[0], e: req.tetraplets[1]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            service.receive_event(req.args[0], req.args[1], callParams);
            resp.result = {};
        }
        next();
    });
}
exports.registerClientAPI = registerClientAPI;
function fanout_event() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var topic;
    var event;
    var call;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        topic = args[1];
        event = args[2];
        call = args[3];
        config = args[4];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        topic = args[0];
        event = args[1];
        call = args[2];
        config = args[3];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n       (call %init_peer_id% (\"getDataSrv\" \"topic\") [] topic)\n      )\n      (call %init_peer_id% (\"getDataSrv\" \"event\") [] event)\n     )\n     (xor\n      (call %init_peer_id% (\"callbackSrv\" \"call\") [\"will check signature\"])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n     )\n    )\n    (xor\n     (call %init_peer_id% (\"GeesomeCrypto\" \"checkSignature\") [event.$.from! event.$.data! event.$.seqno! event.$.signature!] sigValid)\n     (xor\n      (call %init_peer_id% (\"callbackSrv\" \"call\") [\"checkSignature failed\"])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n     )\n    )\n   )\n   (xor\n    (call %init_peer_id% (\"callbackSrv\" \"call\") [\"did check signature\"])\n    (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n   )\n  )\n  (xor\n   (match sigValid false\n    (xor\n     (xor\n      (call %init_peer_id% (\"callbackSrv\" \"call\") [\"signature_not_valid\"])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\n     )\n     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 5])\n    )\n   )\n   (seq\n    (seq\n     (seq\n      (xor\n       (call %init_peer_id% (\"callbackSrv\" \"call\") [\"signature is valid\"])\n       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 6])\n      )\n      (xor\n       (seq\n        (seq\n         (seq\n          (call -relay- (\"op\" \"string_to_b58\") [topic] k)\n          (call -relay- (\"kad\" \"neighborhood\") [k [] []] nodes)\n         )\n         (fold nodes n\n          (par\n           (seq\n            (xor\n             (seq\n              (call n (\"peer\" \"timestamp_sec\") [] t)\n              (call n (\"aqua-dht\" \"get_values\") [topic t] $res)\n             )\n             (null)\n            )\n            (call -relay- (\"op\" \"noop\") [])\n           )\n           (next n)\n          )\n         )\n        )\n        (call -relay- (\"aqua-dht\" \"merge_two\") [$res.$.[0].result! $res.$.[1].result!] v)\n       )\n       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 7])\n      )\n     )\n     (fold v.$.result! r\n      (par\n       (seq\n        (call r.$.relay_id.[0]! (\"op\" \"noop\") [])\n        (xor\n         (seq\n          (call r.$.peer_id! (\"api\" \"receive_event\") [topic event])\n          (par\n           (seq\n            (seq\n             (call r.$.relay_id.[0]! (\"op\" \"noop\") [])\n             (call -relay- (\"op\" \"noop\") [])\n            )\n            (xor\n             (call %init_peer_id% (\"callbackSrv\" \"call\") [\"receive_event\"])\n             (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 8])\n            )\n           )\n           (null)\n          )\n         )\n         (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 9])\n        )\n       )\n       (next r)\n      )\n     )\n    )\n    (par\n     (xor\n      (call %init_peer_id% (\"callbackSrv\" \"call\") [\"done\"])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 10])\n     )\n     (null)\n    )\n   )\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 11])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'topic', function () { return topic; });
            h.on('getDataSrv', 'event', function () { return event; });
            h.use(function (req, resp, next) {
                if (req.serviceId === 'callbackSrv' && req.fnName === 'call') {
                    var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                            arg0: req.tetraplets[0]
                        } });
                    resp.retCode = v1_1.ResultCodes.success;
                    call(req.args[0], callParams);
                    resp.result = {};
                }
                next();
            });
            h.onEvent('callbackSrv', 'response', function (args) {
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for fanout_event');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
exports.fanout_event = fanout_event;
